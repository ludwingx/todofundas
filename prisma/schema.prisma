generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id             String       @id @default(uuid())
  name           String
  phoneModel     PhoneModel   @relation(fields: [phoneModelId], references: [id])
  phoneModelId   String
  color          String
  stock          Int
  minStock       Int          @default(5) // stock mínimo para alertas
  priceRetail    Float        // precio por menor
  priceWholesale Float        // precio por mayor
  costPrice      Float        // precio de costo
  warehouse      Warehouse    @relation(fields: [warehouseId], references: [id])
  warehouseId    String
  type           ProductType  @relation(fields: [typeId], references: [id])
  typeId         String
  supplier       Supplier?    @relation(fields: [supplierId], references: [id])
  supplierId     String?
  sales          Sale[]
  purchases      Purchase[]
  movements      InventoryMovement[]
  createdAt      DateTime     @default(now())
  imageUrl       String?      // URL de la imagen del producto
  updatedAt      DateTime     @updatedAt
  status        String       @default("active") // "active" o "deleted"

  @@index([phoneModelId, color])
  @@index([warehouseId])
  @@index([typeId])
  @@index([stock])
}

model PhoneModel {
  id      String    @id @default(uuid())
  name    String    @unique
  status  String    @default("active") // "active" o "deleted"
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Warehouse {
  id       String    @id @default(uuid())
  name     String
  location String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductType {
  id       String    @id @default(uuid())
  name     String    @unique // "Funda", "Vidrio", etc.
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id        String     @id @default(uuid())
  name      String
  contact   String?
  email     String?
  phone     String?
  address   String?
  products  Product[]
  purchases Purchase[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Sale {
  id           String    @id @default(uuid())
  productId    String
  product      Product   @relation(fields: [productId], references: [id])
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  customerName String?
  customerPhone String?
  paymentMethod String   @default("efectivo") // efectivo, tarjeta, transferencia
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([createdAt])
  @@index([productId])
}

model Purchase {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoiceNumber String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([createdAt])
  @@index([productId])
  @@index([supplierId])
}

model InventoryMovement {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  type        String    // "entrada", "salida", "ajuste"
  quantity    Int       // positivo para entrada, negativo para salida
  reason      String    // "venta", "compra", "ajuste", "devolucion"
  reference   String?   // referencia a venta, compra, etc.
  notes       String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())

  @@index([productId])
  @@index([createdAt])
  @@index([type])
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  password    String   // hash de la contraseña
  name        String
  role        String   @default("user") // admin, user
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  inventoryMovements InventoryMovement[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([username])
  @@index([isActive])
}
